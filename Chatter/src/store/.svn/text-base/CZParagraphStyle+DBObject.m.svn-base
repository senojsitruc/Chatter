//
//  CZParagraphStyle.m
//  ScriptSync
//
//  Created by Curtis Jones on 2010.12.01.
//  Copyright 2010 Nexidia, Inc. All rights reserved.
//

#import "CZParagraphStyle+DBObject.h"
#import "CZDocument+DBObject.h"
#import "DBObject.h"
#import "DBConnection.h"
#import "DBResult.h"
#import "DBStatement.h"
#import "Easy.h"

@interface CZParagraphStyle (PrivateMethods)
- (CZParagraphStyle *)__dbobjectHandleResult:(DBResult *)result;
@end

@implementation CZParagraphStyle (DBObject)

/**
 *
 *
 */
+ (NSArray *)dbobjectSelectAllForDocument:(CZDocument *)document
{
	BOOL retval = TRUE;
	DBConnection *connection = nil;
	DBResult *result = nil;
	DBStatement *statement = nil;
	CZParagraphStyle *object = nil;
	NSMutableArray *objects = [NSMutableArray array];
	
	// from the document to the db connection
	if (nil == (connection = document.dbconnection))
		@throw [NSException exceptionWithName:CZExceptionNoDbConnection reason:@"No connection associated with this document." userInfo:nil];
	
	// get the prepared statement for this operation
	if (nil == (statement = [connection statementForName:@"paragraphstyle_select_all"]))
		@throw [NSException exceptionWithName:CZExceptionNoStatement reason:@"Could not find the required statement" userInfo:nil];
	
	// execute statement
	if (![connection exec:statement result:&result])
		CZ_DBOBJ_ERROR(statement,retval,done);
	
	// handle result
	CZ_DBOBJ_HANDLE([CZParagraphStyle paragraphStyle], @selector(__addCachedParagraphStyle:));
	
done:
	[statement clear];
	return objects;
}

/**
 *
 *
 */
- (BOOL)dbobjectInsert
{
	BOOL retval = TRUE;
	DBConnection *connection = nil;
	DBResult *result = nil;
	DBStatement *statement = nil;
	NSUInteger databaseId;
	
	// from the document to the db connection
	if (nil == (connection = self.document.dbconnection))
		@throw [NSException exceptionWithName:CZExceptionNoDbConnection reason:@"No connection associated with this document." userInfo:nil];
	
	// get the prepared statement for this operation
	if (nil == (statement = [connection statementForName:@"paragraphstyle_insert"]))
		@throw [NSException exceptionWithName:CZExceptionNoStatement reason:@"Could not find the required statement" userInfo:nil];
	
	// if this object already has a database key then don't insert it again
	if (self.databaseId != 0)
		@throw [NSException exceptionWithName:CZExceptionIllegalOperation reason:@"Can not insert an already inserted object" userInfo:nil];
	
	// setup
	{
		[statement bindUint32:mHeadIndent atIndex:1];
		[statement bindUint32:mRestIndent atIndex:2];
		[statement bindUint32:mLineWidth atIndex:3];
		[statement bindUint32:mPreSpacing atIndex:4];
	}
	
	// execute statement
	if (![connection exec:statement result:&result])
		CZ_DBOBJ_ERROR(statement,retval,done);
	
	// get primary key
	if (TRUE == [connection lastInsertRowId:&databaseId]) {
		self.databaseId = databaseId;
		[self.document __addCachedParagraphStyle:(CZParagraphStyle *)[self dbobjectCopy]];
	}
	else
		NSLog(@"%s.. failed to lastInsertRowId()", __PRETTY_FUNCTION__);
	
done:
	[statement clear];
	return retval;
}

/**
 *
 *
 */
- (BOOL)dbobjectUpdate
{
	BOOL retval = TRUE;
	DBConnection *connection = nil;
	DBResult *result = nil;
	DBStatement *statement = nil;
	
	if ([[self.document __getCachedParagraphStyleForParagraphStyle:self] dbobjectCompare:self] == DBObjectComparisonEquals)
		return TRUE;
	
	// from the document to the db connection
	if (nil == (connection = self.document.dbconnection))
		@throw [NSException exceptionWithName:CZExceptionNoDbConnection reason:@"No connection associated with this document." userInfo:nil];
	
	// get the prepared statement for this operation
	if (nil == (statement = [connection statementForName:@"paragraphstyle_update_by_id"]))
		@throw [NSException exceptionWithName:CZExceptionNoStatement reason:@"Could not find the required statement" userInfo:nil];
	
	// the record must already have been inserted before we can attempt to update it
	if (mDatabaseId == 0)
		@throw [NSException exceptionWithName:CZExceptionIllegalOperation reason:@"Can not update a record that hasn't yet been inserted" userInfo:nil];
	
	// setup
	{
		[statement bindUint32:mHeadIndent atIndex:1];
		[statement bindUint32:mRestIndent atIndex:2];
		[statement bindUint32:mLineWidth atIndex:3];
		[statement bindUint32:mPreSpacing atIndex:4];
		[statement bindUint32:mDatabaseId atIndex:5];
	}
	
	// execute statement
	if (![connection exec:statement result:&result])
		CZ_DBOBJ_ERROR(statement,retval,done);
	
	[self.document __addCachedParagraphStyle:(CZParagraphStyle *)[self dbobjectCopy]];
	
done:
	[statement clear];
	return retval;
}

/**
 *
 *
 */
- (BOOL)dbobjectDelete
{
	BOOL retval = TRUE;
	DBConnection *connection = nil;
	DBResult *result = nil;
	DBStatement *statement = nil;
	
	// from the document to the db connection
	if (nil == (connection = self.document.dbconnection))
		@throw [NSException exceptionWithName:CZExceptionNoDbConnection reason:@"No connection associated with this document." userInfo:nil];
	
	// get the prepared statement for this operation
	if (nil == (statement = [connection statementForName:@"paragraphstyle_delete_by_id"]))
		@throw [NSException exceptionWithName:CZExceptionNoStatement reason:@"Could not find the required statement" userInfo:nil];
	
	// the record must already have been inserted before we can attempt to delete it
	if (mDatabaseId == 0)
		@throw [NSException exceptionWithName:CZExceptionIllegalOperation reason:@"Can not delete a record that hasn't yet been inserted" userInfo:nil];
	
	// setup
	[statement bindUint32:mDatabaseId atIndex:1];
	
	// execute statement
	if (![connection exec:statement result:&result])
		CZ_DBOBJ_ERROR(statement,retval,done);
	
	[[self retain] autorelease];
	[self.document __removeParagraphStyle:self];
	[self.document __removeCachedParagraphStyle:self];
	
done:
	[statement clear];
	return retval;
}

/**
 *
 *
 */
- (DBObjectComparisonResult)dbobjectCompare:(id<DBObject>)anObject
{
	CZParagraphStyle *paragraphStyle = (CZParagraphStyle *)anObject;
	
	if (paragraphStyle->mHeadIndent == mHeadIndent &&
			paragraphStyle->mRestIndent == mRestIndent &&
			paragraphStyle->mLineWidth == mLineWidth &&
			paragraphStyle->mPreSpacing == mPreSpacing &&
			paragraphStyle->mPointsPerChar == mPointsPerChar &&
			paragraphStyle->mPointsPerLine == mPointsPerLine)
		return DBObjectComparisonEquals;
	else
		return DBObjectComparisonNotEquals;
}

/**
 *
 *
 */
- (id<DBObject>)dbobjectCopy
{
	CZParagraphStyle *paragraphStyle = [self copy];
	
	paragraphStyle->mHeadIndent = mHeadIndent;
	paragraphStyle->mRestIndent = mRestIndent;
	paragraphStyle->mLineWidth = mLineWidth;
	paragraphStyle->mPreSpacing = mPreSpacing;
	paragraphStyle->mPointsPerChar = mPointsPerChar;
	paragraphStyle->mPointsPerLine = mPointsPerLine;
	
	return paragraphStyle;
}





#pragma mark -
#pragma mark Private

/**
 *
 *
 */
- (CZParagraphStyle *)__dbobjectHandleResult:(DBResult *)result
{
	[result getUint32:&mDatabaseId atColumn:0];
	[result getUint32:&mHeadIndent atColumn:1];
	[result getUint32:&mRestIndent atColumn:2];
	[result getUint32:&mLineWidth atColumn:3];
	[result getUint32:&mPreSpacing atColumn:4];
	
	return self;
}

@end
