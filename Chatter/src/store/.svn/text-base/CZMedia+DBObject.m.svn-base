//
//  CZMedia+DBObject.m
//  ScriptSync
//
//  Created by Curtis Jones on 2010.09.27.
//  Copyright 2010 Nexidia, Inc. All rights reserved.
//

#import "CZMedia+DBObject.h"
#import "CZDocument+DBObject.h"
#import "CZGroup.h"
#import "DBObject.h"
#import "DBConnection.h"
#import "DBResult.h"
#import "DBStatement.h"
#import "Easy.h"

@interface CZMedia (PrivateMethods)
- (CZMedia *)__dbobjectHandleResult:(DBResult *)result;
@end

@implementation CZMedia (DBObject)

/**
 *
 *
 */
+ (NSArray *)dbobjectSelectAllForDocument:(CZDocument *)document
{
	BOOL retval = TRUE;
	DBConnection *connection = nil;
	DBResult *result = nil;
	DBStatement *statement = nil;
	CZMedia *object = nil;
	NSMutableArray *objects = [NSMutableArray array];
	
	// from the document to the db connection
	if (nil == (connection = document.dbconnection))
		@throw [NSException exceptionWithName:CZExceptionNoDbConnection reason:@"No connection associated with this document." userInfo:nil];
	
	// get the prepared statement for this operation
	if (nil == (statement = [connection statementForName:@"media_select_all"]))
		@throw [NSException exceptionWithName:CZExceptionNoStatement reason:@"Could not find the required statement" userInfo:nil];
	
	// execute statement
	if (![connection exec:statement result:&result])
		CZ_DBOBJ_ERROR(statement,retval,done);
	
	// handle result
	CZ_DBOBJ_HANDLE([CZMedia media], @selector(__addCachedMedia:));
	
	// re-check to see if the path exists
	for (CZMedia *media in objects) {
		[media updatePathExists];
		
		if (media->mGroupId != 0)
			[media setParentGroup:[document groupWithId:media->mGroupId]];
	}
	
done:
	[statement clear];
	return objects;
}

/**
 *
 *
 */
- (BOOL)dbobjectInsert
{
	BOOL retval = TRUE;
	DBConnection *connection = nil;
	DBResult *result = nil;
	DBStatement *statement = nil;
	NSUInteger databaseId;
	
	// from the document to the db connection
	if (nil == (connection = self.document.dbconnection))
		@throw [NSException exceptionWithName:CZExceptionNoDbConnection reason:@"No connection associated with this document." userInfo:nil];
	
	// get the prepared statement for this operation
	if (nil == (statement = [connection statementForName:@"media_insert"]))
		@throw [NSException exceptionWithName:CZExceptionNoStatement reason:@"Could not find the required statement" userInfo:nil];
	
	// if this object already has a database key then don't insert it again
	if (mDatabaseId != 0)
		@throw [NSException exceptionWithName:CZExceptionIllegalOperation reason:@"Can not insert an already inserted object" userInfo:nil];
	
	// setup
	{
		if (mGroupId != 0 || 0 != (mGroupId = mGroup.databaseId))
			[statement bindUint32:mGroupId atIndex:1];
		else
			[statement bindNullAtIndex:1];
		
		[statement bindString:mName atIndex:2];
		[statement bindString:mPath atIndex:3];
		[statement bindInt32:mDuration atIndex:4];
		
		if (mPoster == 0)
			[statement bindNullAtIndex:5];
		else
			[statement bindInt32:mPoster atIndex:5];
		
		[statement bindInt32:mInPoint atIndex:6];
		[statement bindInt32:mOutPoint atIndex:7];
		[statement bindInt32:mBegOffset atIndex:8];
		[statement bindInt32:mEndOffset atIndex:9];
		[statement bindInt32:mTimebase atIndex:10];
		[statement bindInt32:mNtsc atIndex:11];
		[statement bindInt32:mStatus atIndex:12];
		[statement bindInt32:mHidden atIndex:13];
	}
	
	// execute statement
	if (![connection exec:statement result:&result])
		CZ_DBOBJ_ERROR(statement,retval,done);
	
	// get primary key
	if (TRUE == [connection lastInsertRowId:&databaseId]) {
		self.databaseId = databaseId;
		[self.document __addCachedMedia:(CZMedia *)[self dbobjectCopy]];
	}
	else
		NSLog(@"%s.. failed to lastInsertRowId()", __PRETTY_FUNCTION__);
	
done:
	[statement clear];
	return retval;
}

/**
 *
 *
 */
- (BOOL)dbobjectUpdate
{
	BOOL retval = TRUE;
	DBConnection *connection = nil;
	DBResult *result = nil;
	DBStatement *statement = nil;
	
	if ([[self.document __getCachedMediaForMedia:self] dbobjectCompare:self] == DBObjectComparisonEquals)
		return TRUE;
	
	// from the document to the db connection
	if (nil == (connection = self.document.dbconnection))
		@throw [NSException exceptionWithName:CZExceptionNoDbConnection reason:@"No connection associated with this document." userInfo:nil];
	
	// get the prepared statement for this operation
	if (nil == (statement = [connection statementForName:@"media_update_by_id"]))
		@throw [NSException exceptionWithName:CZExceptionNoStatement reason:@"Could not find the required statement" userInfo:nil];
	
	// the record must already have been inserted before we can attempt to update it
	if (mDatabaseId == 0)
		@throw [NSException exceptionWithName:CZExceptionIllegalOperation reason:@"Can not update a record that hasn't yet been inserted" userInfo:nil];
	
	// setup
	{
		if (mGroupId != 0 || 0 != (mGroupId = mGroup.databaseId))
			[statement bindUint32:mGroupId atIndex:1];
		else
			[statement bindNullAtIndex:1];
		
		[statement bindString:mName atIndex:2];
		[statement bindString:mPath atIndex:3];
		[statement bindInt32:mDuration atIndex:4];
		
		if (mPoster == 0)
			[statement bindNullAtIndex:5];
		else
			[statement bindInt32:mPoster atIndex:5];
		
		[statement bindInt32:mInPoint atIndex:6];
		[statement bindInt32:mOutPoint atIndex:7];
		[statement bindInt32:mBegOffset atIndex:8];
		[statement bindInt32:mEndOffset atIndex:9];
		[statement bindInt32:mTimebase atIndex:10];
		[statement bindInt32:mNtsc atIndex:11];
		[statement bindInt32:mStatus atIndex:12];
		[statement bindInt32:mHidden atIndex:13];
		
		[statement bindUint32:mDatabaseId atIndex:14];
	}
	
	// execute statement
	if (![connection exec:statement result:&result])
		CZ_DBOBJ_ERROR(statement,retval,done);
	
	[self.document __addCachedMedia:(CZMedia *)[self dbobjectCopy]];
	
done:
	[statement clear];
	return retval;
}

/**
 *
 *
 */
- (BOOL)dbobjectDelete
{
	BOOL retval = TRUE;
	DBConnection *connection = nil;
	DBResult *result = nil;
	DBStatement *statement = nil;
	
	// from the document to the db connection
	if (nil == (connection = self.document.dbconnection))
		@throw [NSException exceptionWithName:CZExceptionNoDbConnection reason:@"No connection associated with this document." userInfo:nil];
	
	// get the prepared statement for this operation
	if (nil == (statement = [connection statementForName:@"media_delete_by_id"]))
		@throw [NSException exceptionWithName:CZExceptionNoStatement reason:@"Could not find the required statement" userInfo:nil];
	
	// the record must already have been inserted before we can attempt to delete it
	if (mDatabaseId == 0)
		@throw [NSException exceptionWithName:CZExceptionIllegalOperation reason:@"Can not delete a record that hasn't yet been inserted" userInfo:nil];
	
	// setup
	[statement bindUint32:mDatabaseId atIndex:1];
	
	// execute statement
	if (![connection exec:statement result:&result])
		CZ_DBOBJ_ERROR(statement,retval,done);
	
	[[self retain] autorelease];
	[self.document __removeMedia:self];
	[self.document __removeCachedMedia:self];
	
done:
	[statement clear];
	return retval;
}

/**
 *
 *
 */
- (DBObjectComparisonResult)dbobjectCompare:(id<DBObject>)anObject
{
	CZMedia *media = (CZMedia *)anObject;
	
	if (media->mName == mName &&
			media->mPath == mPath &&
			media->mDuration == mDuration &&
			media->mPoster == mPoster &&
			media->mInPoint == mInPoint &&
			media->mOutPoint == mOutPoint &&
			media->mBegOffset == mBegOffset &&
			media->mEndOffset == mEndOffset &&
			media->mTimebase == mTimebase &&
			media->mNtsc == mNtsc &&
			media->mStatus == mStatus &&
			media->mHidden == mHidden &&
			media->mGroup == mGroup &&
			media->mGroupId == mGroupId)
		return DBObjectComparisonEquals;
	else
		return DBObjectComparisonNotEquals;
}

/**
 *
 *
 */
- (id<DBObject>)dbobjectCopy
{
	CZMedia *media = [self copy];
	
	media->mName = [mName retain];
	media->mPath = [mPath retain];
	media->mDuration = mDuration;
	media->mPoster = mPoster;
	media->mInPoint = mInPoint;
	media->mOutPoint = mOutPoint;
	media->mBegOffset = mBegOffset;
	media->mEndOffset = mEndOffset;
	media->mTimebase = mTimebase;
	media->mNtsc = mNtsc;
	media->mStatus = mStatus;
	media->mHidden = mHidden;
	media->mGroup = mGroup;
	media->mGroupId = mGroupId;
	
	return media;
}





#pragma mark -
#pragma mark Private

/**
 *
 *
 */
- (CZMedia *)__dbobjectHandleResult:(DBResult *)result
{
	[result getUint32:&mDatabaseId atColumn:0];
	[result getUint32:&mGroupId atColumn:1];
	[result getString:&mName atColumn:2];
	[result getString:&mPath atColumn:3];
	[result getInt32:&mDuration atColumn:4];
	[result getInt32:&mPoster atColumn:5];
	[result getInt32:&mInPoint atColumn:6];
	[result getInt32:&mOutPoint atColumn:7];
	[result getInt32:&mBegOffset atColumn:8];
	[result getInt32:&mEndOffset atColumn:9];
	[result getInt32:&mTimebase atColumn:10];
	[result getInt32:&mNtsc atColumn:11];
	[result getInt32:&mStatus atColumn:12];
	[result getInt32:&mHidden atColumn:13];
	
	return self;
}

@end
