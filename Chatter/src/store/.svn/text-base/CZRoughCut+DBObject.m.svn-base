//
//  CZRoughCut.m
//  ScriptSync
//
//  Created by Curtis Jones on 2010.11.30.
//  Copyright 2010 Nexidia, Inc. All rights reserved.
//

#import "CZRoughCut.h"
#import "CZRoughCut+DBObject.h"
#import "CZRoughCutSegment+DBObject.h"
#import "CZDocument+DBObject.h"
#import "DBObject.h"
#import "DBConnection.h"
#import "DBResult.h"
#import "DBStatement.h"
#import "Easy.h"

@interface CZRoughCut (DBObjectPrivate)
- (CZRoughCut *)__dbobjectHandleResult:(DBResult *)result;
@end

@implementation CZRoughCut (DBObject)

/**
 *
 *
 */
+ (NSArray *)dbobjectSelectAllForDocument:(CZDocument *)document
{
	BOOL retval = TRUE;
	DBConnection *connection = nil;
	DBResult *result = nil;
	DBStatement *statement = nil;
	CZRoughCut *object = nil;
	NSMutableArray *objects = [NSMutableArray array];
	
	// from the document to the db connection
	if (nil == (connection = document.dbconnection))
		@throw [NSException exceptionWithName:CZExceptionNoDbConnection reason:@"No connection associated with this document." userInfo:nil];
	
	// get the prepared statement for this operation
	if (nil == (statement = [connection statementForName:@"roughcut_select_all"]))
		@throw [NSException exceptionWithName:CZExceptionNoStatement reason:@"Could not find the required statement" userInfo:nil];
	
	// execute statement
	if (![connection exec:statement result:&result])
		CZ_DBOBJ_ERROR(statement,retval,done);
	
	// handle result
	CZ_DBOBJ_HANDLE([CZRoughCut roughcut], @selector(__addCachedRoughCut:));
	
done:
	[statement clear];
	return objects;
}

/**
 *
 *
 */
- (BOOL)dbobjectInsert
{
	BOOL retval = TRUE;
	DBConnection *connection = nil;
	DBResult *result = nil;
	DBStatement *statement = nil;
	NSUInteger databaseId;
	
	// from the document to the db connection
	if (nil == (connection = self.document.dbconnection))
		@throw [NSException exceptionWithName:CZExceptionNoDbConnection reason:@"No connection associated with this roughcut." userInfo:nil];
	
	// get the prepared statement for this operation
	if (nil == (statement = [connection statementForName:@"roughcut_insert"]))
		@throw [NSException exceptionWithName:CZExceptionNoStatement reason:@"Could not find the required statement" userInfo:nil];
	
	// if this object already has a database key then don't insert it again
	if (mDatabaseId != 0)
		@throw [NSException exceptionWithName:CZExceptionIllegalOperation reason:@"Can not insert an already inserted object" userInfo:nil];
	
	// setup
	{
		[statement bindString:mName atIndex:1];
	}
	
	// execute statement
	if (![connection exec:statement result:&result])
		CZ_DBOBJ_ERROR(statement,retval,done);
	
	// get primary key
	if (TRUE == [connection lastInsertRowId:&databaseId]) {
		self.databaseId = databaseId;
		[self.document __addCachedRoughCut:(CZRoughCut *)[self dbobjectCopy]];
	}
	else
		NSLog(@"%s.. failed to lastInsertRowId()", __PRETTY_FUNCTION__);
	
done:
	[statement clear];
	return retval;
}

/**
 *
 *
 */
- (BOOL)dbobjectUpdate
{
	BOOL retval = TRUE;
	DBConnection *connection = nil;
	DBResult *result = nil;
	DBStatement *statement = nil;
	
	if ([[self.document __getCachedRoughCutForRoughCut:self] dbobjectCompare:self] == DBObjectComparisonEquals)
		return TRUE;
	
	// from the document to the db connection
	if (nil == (connection = self.document.dbconnection))
		@throw [NSException exceptionWithName:CZExceptionNoDbConnection reason:@"No connection associated with this roughcut." userInfo:nil];
	
	// get the prepared statement for this operation
	if (nil == (statement = [connection statementForName:@"roughcut_update_by_id"]))
		@throw [NSException exceptionWithName:CZExceptionNoStatement reason:@"Could not find the required statement" userInfo:nil];
	
	// the record must already have been inserted before we can attempt to update it
	if (mDatabaseId == 0)
		@throw [NSException exceptionWithName:CZExceptionIllegalOperation reason:@"Can not update a record that hasn't yet been inserted" userInfo:nil];
	
	// setup
	{
		[statement bindString:mName atIndex:1];
		[statement bindUint32:mDatabaseId atIndex:2];
	}
	
	// execute statement
	if (![connection exec:statement result:&result])
		CZ_DBOBJ_ERROR(statement,retval,done);
	
	[self.document __addCachedRoughCut:(CZRoughCut *)[self dbobjectCopy]];
	
done:
	[statement clear];
	return retval;
}

/**
 *
 *
 */
- (BOOL)dbobjectDelete
{
	BOOL retval = TRUE;
	DBConnection *connection = nil;
	DBResult *result = nil;
	DBStatement *statement = nil;
	
	// from the document to the db connection
	if (nil == (connection = self.document.dbconnection))
		@throw [NSException exceptionWithName:CZExceptionNoDbConnection reason:@"No connection associated with this roughcut." userInfo:nil];
	
	// get the prepared statement for this operation
	if (nil == (statement = [connection statementForName:@"roughcut_delete_by_id"]))
		@throw [NSException exceptionWithName:CZExceptionNoStatement reason:@"Could not find the required statement" userInfo:nil];
	
	// the record must already have been inserted before we can attempt to delete it
	if (mDatabaseId == 0)
		@throw [NSException exceptionWithName:CZExceptionIllegalOperation reason:@"Can not delete a record that hasn't yet been inserted" userInfo:nil];
	
	// setup
	[statement bindUint32:mDatabaseId atIndex:1];
	
	// execute statement
	if (![connection exec:statement result:&result])
		CZ_DBOBJ_ERROR(statement,retval,done);
	
	[[self retain] autorelease];
	[self.document __removeRoughCut:self];
	[self.document __removeCachedRoughCut:self];
	
done:
	[statement clear];
	return retval;
}

/**
 *
 *
 */
- (DBObjectComparisonResult)dbobjectCompare:(id<DBObject>)anObject
{
	CZRoughCut *roughcut = (CZRoughCut *)anObject;
	
	if (roughcut->mName == mName)
		return DBObjectComparisonEquals;
	else
		return DBObjectComparisonNotEquals;
}

/**
 *
 *
 */
- (id<DBObject>)dbobjectCopy
{
	CZRoughCut *roughcut = [self copy];
	
	roughcut->mName = [mName retain];
	
	return roughcut;
}





#pragma mark -
#pragma mark Private

/**
 *
 *
 */
- (CZRoughCut *)__dbobjectHandleResult:(DBResult *)result
{
	[result getUint32:&mDatabaseId atColumn:0];
	[result getString:&mName atColumn:1];
	[result getUint32:&mDeleted atColumn:2];
	
	return self;
}

@end
